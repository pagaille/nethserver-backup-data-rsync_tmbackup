#!/usr/bin/perl -w

#
# Copyright (C) 2017 Matthieu Gaillet
# 
# This script is part of NethServer. It is heavily inspired by the 
# backup-data-duplicity script
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use File::Temp;
use Time::localtime;
use NethServer::BackupData;

use constant CMD => '/root/rsync-time-backup/rsync_tmbackup.sh';

my $confdb = esmith::ConfigDB->open;
my $systemname = $confdb->get('SystemName') or die "No SystemName db entry found\n";
$systemname = $systemname->prop('type');
my $backupwk = $confdb->get('backup-data') or die "No backup-data db entry found\n";

my $VFSType = $backupwk->prop('VFSType') || 'UNKNOWN';
my $mntdir = $backupwk->prop('Mount') || '/mnt/backup';
my $logFile = $backupwk->prop('LogFile') || '/var/log/last-backup.log';
my $opts = "";
my $dst = "";
my $rsyncflags = "";

our $backup = new NethServer::BackupData();

# Read include and exclude from config directory
my @include_data_files = $backup->includes(NethServer::BackupData::CONF_DIR);
my @exclude_data_files = $backup->excludes(NethServer::BackupData::CONF_DIR);

if (!@include_data_files) {
    $backup->logger('ERROR',"Nothing to backup - 1");
    exit 1;
}

# Create globbing file list
my $tmpExclude = File::Temp->new(UNLINK => 1);
chmod(0600,$tmpExclude->filename);

my $tmpInclude = File::Temp->new(UNLINK => 1);
chmod(0600,$tmpInclude->filename);

$backup->uniq(\@include_data_files);
$backup->uniq(\@exclude_data_files);

foreach  (@exclude_data_files) {
	print $tmpExclude "$_\n";
}
foreach  (@include_data_files) {
	print $tmpInclude "$_\n";
}

$rsyncflags = "-D ";
$rsyncflags .= "--compress ";
$rsyncflags .= "--numeric-ids ";
$rsyncflags .= "--links ";
$rsyncflags .= "--hard-links ";
$rsyncflags .= "--itemize-changes ";
$rsyncflags .= "--times ";
$rsyncflags .= "--recursive ";
$rsyncflags .= "--perms ";
$rsyncflags .= "--owner ";
$rsyncflags .= "--group ";
$rsyncflags .= "--stats ";
$rsyncflags .= "--human-readable ";
$rsyncflags .= "--files-from=$tmpInclude ";
$rsyncflags .= "--exclude-from=$tmpExclude ";
$rsyncflags .= " --one-file-system "; # commment if your filesystem includes bind-mounted drives
# $rsyncflags .= "--dry-run "; # to be used for tests

$opts .= "--rsync-set-flags \"$rsyncflags\"";

$dst = "$mntdir/$systemname";

# create marker
mkdir "$dst"; system("touch $dst/backup.marker");

my $ret = system(CMD." $opts / $dst &>$logFile");

if ($ret != 0) {
   $backup->logger("ERROR","Backup failed, see $logFile for details - $ret");
   exit 1; 
}

exit (0);


